/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'checkstyle'
  id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'com.adarshr.test-logger' version '1.7.0'
  id 'com.diffplug.gradle.spotless' version '3.23.1'
  id 'com.github.jk1.dependency-license-report' version '1.9'
  id 'net.researchgate.release' version '2.8.0'
}

repositories {
  mavenCentral()
}

ext {
  jacksonCoreVersion = '2.9.9'
  jacksonDatatypeVersion = '2.9.9'
  lombokVersion = '1.18.8'
  slf4jVersion = '1.7.26'
}

dependencies {
  implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonCoreVersion}"
  implementation "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonCoreVersion}"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonDatatypeVersion}"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeVersion}"
  implementation 'org.apache.httpcomponents:httpclient:4.5.9'
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.27.0'
  testImplementation 'org.assertj:assertj-core:3.12.2'
}

task testUnit(type: Test) {
  useJUnit {
    includeCategories 'marquez.client.UnitTests'
  }
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId = 'io.github.marquezproject'
      artifactId = 'marquez-java'
      version = '0.1.0'

      from components.java

      artifact sourceJar
      artifact javadocJar

      pom {
        name = 'marquez-java'
        description = 'Java client for Marquez'
        url = 'https://github.com/MarquezProject/marquez-java'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'marquezproject'
            name = 'Marquez Project'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/MarquezProject/marquez-java.git'
          developerConnection = 'scm:git:ssh://github.com:MarquezProject/marquez-java.git'
          url = 'https://github.com/MarquezProject/marquez-java'
        }
      }
    }
  }

  repositories {
    maven {
      url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
      credentials {
        username = System.getenv('SONATYPE_NEXUS_USERNAME')
        password = System.getenv('SONATYPE_NEXUS_PASSWORD')
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

jar {
  manifest {
    attributes(
      'Created-By': "Gradle ${gradle.gradleVersion}",
      'Built-By': System.getProperty('user.name'),
      'Build-Jdk': System.getProperty('java.version'),
      'Implementation-Title': project.name,
      'Implementation-Version': project.version
    )
  }
}

afterReleaseBuild.dependsOn publish

spotless {
  java {
    googleJavaFormat()
    removeUnusedImports()
  }
}

def reportsDir = "${buildDir}/reports";

checkstyle {
  toolVersion = '8.12'
  configFile = rootProject.file('checkstyle.xml')
}

task checkstyle(type: Checkstyle) {
  reports {
    xml.enabled = true
    html.enabled = true
    html.destination = file("${reportsDir}/checkstyle")
  }
}

checkstyleMain {
  source = 'src/main/java'
}

checkstyleTest {
  source = 'src/test/java'
}

def coverageDir = "${reportsDir}/coverage";

jacoco {
  toolVersion = '0.8.2'
  reportsDir = file(coverageDir)
}

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
    html.destination = file(coverageDir)
  }
}
